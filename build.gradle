import io.gitlab.arturbosch.detekt.Detekt
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.jlleitschuh.gradle.ktlint.tasks.GenerateReportsTask

buildscript {
    ext {
        application_id = 'com.android.dev.engineer.kotlin.compose'
        version_name = "1.0"
    }
}

plugins {
    alias libs.plugins.android.application apply false
    alias libs.plugins.android.library apply false
    alias libs.plugins.kotlin apply false
    alias libs.plugins.ktlint apply true
    alias libs.plugins.detekt apply false
    alias libs.plugins.ksp apply false
    alias libs.plugins.sonarqube apply true
    alias libs.plugins.paparazzi apply false
    alias libs.plugins.hilt apply false
    id 'jacoco' // Jacoco plugin: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:jacoco_getting_started
}

def localProperties = new Properties()
localProperties.load(project.rootProject.file("local.properties").newDataInputStream())

subprojects {
    apply plugin: 'org.jlleitschuh.gradle.ktlint'
    apply plugin: 'io.gitlab.arturbosch.detekt'
    apply plugin: 'jacoco'

    afterEvaluate {
        if (project.hasProperty('android')) {
            android {
                compileSdk 33

                defaultConfig {
                    minSdk 23
                    targetSdk 33

                    configurations.configureEach {
                        resolutionStrategy {
                            force "androidx.emoji2:emoji2:1.3.0" // It's necessary to continue with targetSdk=33 to support compose >= 1.5.1
                        }
                    }
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_11
                    targetCompatibility JavaVersion.VERSION_11
                }
                kotlinOptions {
                    jvmTarget = JavaVersion.VERSION_11
                }

                testOptions {
                    reportDir "$project.buildDir/reports/coverage/androidTest/debug/connected" // It's required for Sonar

                    buildTypes {
                        // Jacoco config: It configures/enables createDebugCoverageReport task to be used in generateCodeCoverage task below
                        debug.testCoverageEnabled = true
                    }
                }

                // Jacoco - Generate reports: https://docs.gradle.org/current/userguide/jacoco_plugin.html#default_values_of_the_jacoco_task_extension
                tasks.register('generateCodeCoverage', JacocoReport) {
                    dependsOn 'testDebugUnitTest', 'createDebugCoverageReport'

                    sourceDirectories.from = file("${project.projectDir}/src/main/java") // main source set
                    classDirectories.from = files(JacocoUtil.getKotlinFileTree(project))
                    executionData.from = fileTree(dir: project.buildDir, includes: [
                            '**/*.exec', // unit tests
                            '**/*.ec' // ui tests
                    ])

                    // run unit tests and ui tests to generate code coverage report
                    reports {
                        html.required.set(true)
                        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
                        xml.required.set(true) // It's required for Sonar
                        xml.outputLocation.set(file("${project.buildDir}/reports/jacoco/jacoco.xml"))
                    }
                }

                // Jacoco - Verify violations: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:jacoco_report_violation_rules
                tasks.register('verifyCodeCoverage', JacocoCoverageVerification) {
                    dependsOn 'generateCodeCoverage'

                    sourceDirectories.from = file("${project.projectDir}/src/main/java") // main source set
                    classDirectories.from = files(JacocoUtil.getKotlinFileTree(project))
                    executionData.from = fileTree(dir: project.buildDir, includes: [
                            '**/*.exec', // unit tests
                            '**/*.ec' // ui tests
                    ])

                    violationRules {
                        rule {
                            limit {
                                minimum = 0.3 // 30%
                            }
                        }
                    }
                }

                // Sonar: Upload reports
                rootProject.tasks.named("sonar").configure {
                    dependsOn generateCodeCoverage, tasks.named("lint"), tasks.named("detekt"), ktlintCheck
                }
                generateCodeCoverage.mustRunAfter tasks.named("lint"), ktlintCheck
                generateCodeCoverage.finalizedBy tasks.named("detekt")
            }
        }
    }

    // KtLint options: https://github.com/JLLeitschuh/ktlint-gradle#configuration
    ktlint {
        version = "0.50.0" // KtLint version: https://github.com/pinterest/ktlint/tags
        android = true
        verbose = true
        reporters {
            reporter "html"
            reporter "json" // it's required for Sonar
        }
        filter {
            include("**/*.kt")
            exclude("**/build/**")
        }
    }

    // KtLint reports output directory: https://github.com/JLLeitschuh/ktlint-gradle#setting-reports-output-directory
    tasks.withType(GenerateReportsTask).configureEach {
        reportsOutputDirectory.set(project.layout.buildDirectory.dir("reports/ktlint/$name"))
    }

    // Detekt options: https://detekt.dev/docs/gettingstarted/gradle#groovy-dsl-3
    detekt {
        parallel = true
        allRules = true
        autoCorrect = true
        buildUponDefaultConfig = true
        setSource(files(projectDir))
        config.setFrom(file("${rootProject.rootDir}/config/detekt/detekt.yml"))
    }

    tasks.withType(Detekt).configureEach {
        // Detekt leveraging Gradle's SourceTask: https://detekt.dev/docs/gettingstarted/gradle/#leveraging-gradles-sourcetask---excluding-and-including-source-files
        include("**/*.kt")
        exclude("**/build/**")
        jvmTarget = JavaVersion.VERSION_11

        reports {
            txt.required.set(false)
            sarif.required.set(false)
            md.required.set(false)
            html.required.set(true)
            html.outputLocation.set(file("${project.buildDir}/reports/detekt/detekt.html"))
            xml.required.set(true) // It's required for Sonar
            xml.outputLocation.set(file("${project.buildDir}/reports/detekt/detekt.xml"))
        }
    }

    // Jacoco version: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:configuring_the_jacoco_plugin
    jacoco {
        toolVersion = libs.versions.jacoco.get()
    }

    // Jacoco test options: https://docs.gradle.org/current/userguide/jacoco_plugin.html#default_values_of_the_jacoco_task_extension
    tasks.withType(Test).tap {
        configureEach {
            jacoco {
                includeNoLocationClasses = true // Robolectric support
                excludes = [
                        'jdk.internal.*', // Java compatibility
                        'coil.compose.*'
                ]
            }
            testLogging {
                exceptionFormat = TestExceptionFormat.FULL // Display the full log to identify Paparazzi test failures
                showStackTraces = false
            }
            // Paparazzi screenshots Java compatibility: https://docs.gradle.org/current/userguide/toolchains.html#toolchains_for_tasks
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(JavaVersion.VERSION_11.toString())
            }
        }
    }
}

// Gradle wrapper: https://docs.gradle.org/current/userguide/gradle_wrapper.html#customizing_wrapper
tasks.named('wrapper') {
    description = "Gradle wrapper task to update binary"
    gradleVersion = libs.versions.gradle.get()
    distributionType = Wrapper.DistributionType.BIN
}

// Sonar properties: https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-gradle
sonar {
    description = "Sonar properties task"
    androidVariant = "debug"

    def ktlintReportPaths = subprojects
            .collect { fileTree("${it.buildDir}/reports/ktlint") }
            .findAll { !it.isEmpty() }
            .collect { it.matching { include '**/*.json' }.files.join(",") }

    // Sonar properties: https://docs.sonarqube.org/latest/analysis/analysis-parameters/
    properties {
        property("sonar.host.url", "http://localhost:9000")
        property("sonar.login", localProperties.getProperty("sonar_token"))
        property("sonar.projectName", rootProject.name)
        property("sonar.projectKey", application_id)
        property("sonar.projectVersion", version_name)
        property("sonar.sourceEncoding", "UTF-8")
        property("sonar.coverage.jacoco.xmlReportPaths", "**/build/reports/jacoco/jacoco.xml")
        // https://docs.sonarqube.org/9.9/analyzing-source-code/test-coverage/java-test-coverage
        // https://docs.sonarqube.org/9.9/analyzing-source-code/importing-external-issues/importing-third-party-issues/
        property("sonar.kotlin.detekt.reportPaths", "build/reports/detekt/detekt.xml")
        property("sonar.kotlin.ktlint.reportPaths", ktlintReportPaths)
    }
}

class JacocoUtil {
    static ConfigurableFileTree getKotlinFileTree(Project project) {
        return project.fileTree(
                // Where generated Kotlin classes are located
                dir: "$project.buildDir/tmp/kotlin-classes/debug",
                // Exclude everything that is not created by you, e.g. created by HILT
                excludes: [
                        '**/BuildConfig.*',
                        '**/*$*',
                        '**/Hilt_*.class',
                        'hilt_**',
                        'dagger/hilt/**',
                        '**/*JsonAdapter.*'
                ]
        )
    }
}